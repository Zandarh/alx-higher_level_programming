From ``5-text_indentation`` module
==================================

Using ``text_indentation`` function
===================================

Usage:
======

::

Importing ``text_indentation`` from the module

    >>> text_indentation = __import__('5-text_indentation').text_indentation

Begin tests.

::

if a number is passed
    >>> tet = 20
    >>> text_indentation(tet)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

::
x
passing a string
    >>> text = "I am . and ? plus : gone"
    >>> text_indentation(text)
    I am .
    <BLANKLINE>
    and ?
    <BLANKLINE>
    plus :
    <BLANKLINE>
    gone

::

if a list is passed
    >>> tet = [1, 2, 20]
    >>> text_indentation(tet)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

if a set is passed
    >>> tet = (1, 2, 20)
    >>> text_indentation(tet)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

if a dict is passed
    >>> tet = {"USA":"Washington D.C.", "France":"Paris", "India":"New Delhi"}
    >>> text_indentation(tet)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string


if a bool is passed
    >>> tet = True
    >>> text_indentation(tet)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

if None is passed
    >>> text_indentation(None)
    Traceback (most recent call last):
        ...
    TypeError: text must be a string

if two arguements are passed
    >>> tet = "Truly, I am forgiven"
    >>> text_indentation(tet, "Because")
    Traceback (most recent call last):
        ...
    TypeError: text_indentation() takes 1 positional argument but 2 were given

if no arguement is passed
    >>> text_indentation()
    Traceback (most recent call last):
        ...
    TypeError: text_indentation() missing 1 required positional argument: 'text'
